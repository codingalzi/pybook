#!/usr/bin/env python
# coding: utf-8

# # 변수, 값, 표현식

# 파이썬과 같은 (명령형) 프로그래밍언어의 핵심 기능 중의 하나가 
# 바로 (컴퓨터 메모리에) 저장된 값을 조작하는 일이다.
# 값을 저장하고 조작하기 위해 값을 가리키는 이름이 필요하며
# 이를 위해 변수를 사용한다.
# 컴퓨터 프로그램은 간단하게 말해 변수를 조작하여 원하는 값을
# 만들어내는 명령문의 모음집이라고 할 수 있다.
# 
# 이번 장에서는 변수의 활용법과 함께 
# 파이썬에서 기본으로 제공하는 값의 종류, 값을 표현하는 표현식에 대해 알아본다.

# ## 변수와 값

# **변수**<font size="2">variable</font>는 한마디로 말해
# (컴퓨터 메모리에) 저장된 값을 가리키는 이름이며,
# 컴퓨터 프로그램은 변수를 이용하여 원하는 결과를 만들어 낸다.
# 
# 반면에 **값**<font size="2">value</font>은 컴퓨터에 저장해서
# 활용할 수 있는 대상이며, 
# 정수와 유한 소수가 컴퓨터가 다룰 수 있는 대표적인 값들이다.
# 그리고 '가', '나', '다', 'a', 'b', 'c', '1', '2', '3', '!', ':', '_' 등의 임의의 문자, 숫자, 기호로 
# 구성된 단어를 가리키는 문자열이 있다.
# 예를 들어, '파이썬 좋아요;)', 'Hello, World!', '12.3 - 2.8' 등이 문자열이다.
# 이외에 파이썬은 리스트, 튜플, 집합, 사전 등 다양한 종류의 값을 제공한다.

# ### 변수 할당

# 하나의 값을 가리키는 변수를 사용하기 위해서
# **변수 할당**<font size="2">variable assignment</font>을 명령해야 한다.
# 변수 할당 명령문의 형식은 다음과 같다.
# 
# ```python
# 변수 = 값
# ```
# 
# 예를 들어, 아래 다섯 개의 할당 명령문은 서로 다른 종류의 값을 가리키는 세 개의 변수를
# 선언한다.

# In[1]:


greetings = '안녕하세요!'
num = 17
pi = 3.1415926535897932
scores = (92, 87, 100)
languages = ["파이썬", "자바스크립트", "스칼라", "루비"]


# - `greetings` 변수: `'안녕하세요!'` 라는 문장을 가리킨다.
#     단, 변수 이름과는 달리 값으로 사용되는 단어와 문장은 
#     항상 짝은따옴표 또는 큰따옴표로 감싸져야 한다.
# - `num` 변수: 정수 `17`을 가리킨다.
# - `pi` 변수: 유한소수 `3.1415926535897932`를 가리킨다.
#     유한소수는 공식적으로 
#     부동소수점<font size="2">floating point</font>이라 불린다.
# - `scores` 변수: 세 개의 점수로 구성된 튜플을 가리킨다.
# - `languages` 변수: 네 개의 프로그래밍언어로 구성된 리스트를 가리킨다.
# 
# 선언된 변수는 할당된 값과 동등하게 취급된다.

# In[2]:


greetings


# In[3]:


num + 2


# In[4]:


2 * pi


# In[5]:


mean = (scores[0] + scores[1] + scores[2])/3
mean


# In[6]:


print(languages)


# :::{admonition} 등가 판단
# :class: info
# 
# 변수 할당에 사용되는 등호 기호(`=`)는 
# 선언되는 변수와 변수가 가리키는 값과 서로 동일하다는 의미가 아니다.
# 두 개의 값이 동일한 값을 표현하거나 가리킨다는 **등가성**<font size='2'>equality</font>은
# 두 개의 등호 기호(`==`)를 이용하여 표현한다.
# `==`는 하지만 양쪽에 위치한 두 값이 등가 여부를 판단한다. 
# 예를 들어 `3 + 1`과 `2 * 2`가 동일한 값을 나타낸다는 사실은
# 아래 코드와 같이 실행할 때 결과가 `True`로 나오는 것으로 확인된다.
# 
# ```python
# >>> 3 + 1 == 2 * 2
# True
# ```
# 
# 반면에 `3 + 1 == 2 * 1`는 서로 등가가 아니라고 판면된다.
# 
# ```python
# >>> 3 + 1 == 2 * 1
# False
# ```
# :::

# 그런데 변수가 가리키는 값은 변경될 수 있다.
# 예를 들어, 변수 `num`에 `18`을 새롭게 할당하면
# 이제는 `17`이 아닌 `18`을 가리킨다.

# In[7]:


num = 18


# In[8]:


num + 2


# 업데이트된 변수의 값을 동일한 변수 이름을 이용하여 가리키도록 할 수 있다.
# 아래 코드는 변수 `num`이
# 원래 가리키던 값 18의 두 배인 36일 가리키도록 한다.

# In[9]:


num = num * 2
print(num)


# :::{admonition} 파이썬 튜터와 프레임
# :class: info
# 
# 변수 할당은 **컴퓨터 메모리** 상에서 이루어지며,
# 변수와 변수에 할당된 값 사이의 관계는 
# **프레임**<font size="2">frame</font>을 통해 관리된다.
# 
# 컴퓨터 메모리 상에서 일어나는 변화를 직접 눈으로 볼 수는 없다. 
# 하지만 **파이썬 튜터**([https://pythontutor.com/](https://pythontutor.com/))를 
# 이용하면 프레임의 변화를 시각적으로 추적할 수 있다.
# 앞서 변수 세 개의 할당을 실행하면 프레임이 어떻게 변하는지
# [파이썬 튜터: 변수 할당](https://pythontutor.com/visualize.html#code=greetings%20%3D%20'%EC%95%88%EB%85%95%ED%95%98%EC%84%B8%EC%9A%94!'%0Anum%20%3D%2017%0Api%20%3D%203.1415926535897932%0A%0Aprint%28num%29%0A%0Anum%20%3D%2018%0Aprint%28num%29%0A%0Anum%20%3D%20num%20%2B%202%0Aprint%28num%29%0A&cumulative=false&curInstr=0&heapPrimitives=nevernest&mode=display&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false)에 
# 접속해서 확인할 수 있다.
# 파이썬튜터의 사용법은 다음과 같다.
# 
# * 해당 사이트에 접속해서 코드 확인 및 수정 후 <kbd>Visualize Execution</kbd> 버튼을 누른다.
# * 이후 화면에서 <kbd>Next></kbd> 버튼을 반복해서 누르면
#     각각의 명령문이 차례대로 실행되는 과정에서 발생하는 프레임의 변화를 확인할 수 있다.
# * **Global frame**은 **전역 변수**<font size="2">global variable</font>를 
#     담당하는 **전역 프레임**을 가리킨다.
#     전역 변수에 대한 정의는 나중에 소개한다.
# :::

# ### 변수 이름짓기

# 변수의 이름은 임의로 정할 수 있지만 할당되는 값과 연관된 이름을 사용할 것을 권장한다.
# 예를 들어, 농구 시합에서 A 팀의 점수 72와 B 팀의 점수 80을 
# 가리키는 두 개의 변수를 
# 
# ```python
# x = 72
# y = 80
# ```
# 
# 이라고 하기 보다는
# 
# ```python
# A_score = 72
# B_score = 80
# ```
# 
# 라고 하는 것이 프로그래밍에 보다 많은 도움이 된다.

# **변수 이름짓기 규칙**

# 변수의 이름을 지을 때 지켜야 하는 규칙이 몇 개 있다.
# 
# * 알파벳, 숫자, 밑줄(_, underscore) 등을 조합해서 임의로 조합해서 사용한다.
# * 마침표(.), 연산 기호(+, -, *, /, !, %), 골뱅이 기호(@), 물결 기호(~), 
#     공백<font size="2">space</font> 은 사용할 수 없다.
# * 숫자로 시작할 수 없다.
# * 파이썬에서 특별한 역할을 수행하는 
#     **키워드**<font size="2">keyword</font>는 사용할 수 없다.
# 
#     파이썬 프로그래밍 언어의 키워드는 파이썬 최신 버전 기준으로 총 35개이다.
#     각 키워드의 역할은 필요할 때마다 설명될 것이다. 
# 
#     ```python
#     False      await      else       import     pass
#     None       break      except     in         raise
#     True       class      finally    is         return
#     and        continue   for        lambda     try
#     as         def        from       nonlocal   while
#     assert     del        global     not        with
#     async      elif       if         or         yield
#     ```

# 허용되지 않는 사례 몇 가지를 살펴보자.

# * 숫자로 시작
# 
#     ```python
#     >>> 3dogs = '강아지 세 마리'
#       File "<stdin>", line 1
#         3dogs = '강아지 세 마리'
#          ^
#     SyntaxError: invalid syntax
#     ```

# * 공백 사용
# 
#     ```python
#     >>> big number = 1000000
#       File "<stdin>", line 1
#         big number = 1000000
#             ^
#     SyntaxError: invalid syntax
#     ```

# * 키워드 사용: 예를 들어, `False`는 거짓을 나타내는 
#     부울값<font size="2">Boolean value</font>이기에 
#     다른 의미로 사용될 수 없다.
# 
#     ```python
#     >>> False = 0
#       File "<stdin>", line 1
#         False = 0
#         ^
#     SyntaxError: cannot assign to False
#     ```

# **소문자와 대문자 구분하기**

# 프로그래밍에서 영어 알파벳의 소문자와 대문자는 엄연히 구분된다.
# 예를 들어, `'hello'`와 `'Hello'`는 서로 다른 문자열이다.

# In[10]:


'hello' == 'Hello'


# 또한 규정은 아니지만 변수 이름은 관습적으로 소문자로 시작한다.
# 파이썬의 경우 대문자로 시작하는 이름은 주로 
# **클래스**<font size="2">class</font>를 선언할 때 사용한다.
# 클래스는 나중에 자세히 다룬다.

# **한글 사용**

# 한글 단어, 심지어 자음과 모음도 독립적으로 사용할 수 있다.

# In[11]:


헬로 = 'hello'


# 아래 식에서 덧셈 기호(`+`)는 두 문자열과 함께 사용될 때
# 두 문자열을 차례대로 이어 붙여
# 새로운 문자열을 생성하는 연산자이다.

# In[12]:


헬로 + '!'


# In[13]:


ㅎㄹ = '헬로'


# In[14]:


ㅎㄹ + '!'


# :::{admonition} 주의
# :class: caution
# 
# 프로그램을 작성할 때 변수, 함수 등의 이름으로 한글을 사용하는 일은 
# 아직 일반적이지 않다.
# 하지만 변수가 가리키는 값으로는 한글 등 다양한 언어가 활용된다.
# :::

# ## 함수와 표현식

# ### 연산자

# 일반적으로 **연산**<font size="2">operation</font>은 사칙연산 등 
# 수<font size='2'>number</font>를 대상으로 하는 **계산**을 의미한다.
# 하지만 연산은 수 이외에도 두 문자열의 이어 붙이기 등 다른 종류의 값을 대상으로도 실행될 수 있다.
# 이렇게 특정 종류의 값을 대상으로 계산을 수행하도록 하는 기호를
# **연산자**<font size="2">operator</font>라 부르며,
# 가장 많이 사용되는 연산자는 다음과 같다.
# 
# * 사칙 연산자: 덧셈(`+`), 뺄셈(`-`), 곱셈(`*`), 나눗셈(`/`)
# * 비교 연산자: 작다(`<`), 크다(`>`), 작거나 같다(`<=`), 크거나 같다(`>=`)
# 
# 위 연산자들이 수 연산에 사용되는 경우 수학에서 배운
# 연산 개념과 동일하다.
# 하지만 앞서 살펴보았듯이 수가 아닌 다른 종류의 값들을 대상으로 하면 기능이 달라질 수 있다.

# In[15]:


first = '파이썬, '
second = '안녕!'


# In[16]:


first + second


# In[17]:


'I love python! ' * 4


# :::{admonition} 연산자 우선순위
# :class: info
# 
# 하나의 표현식이 나타내는 값은
# 표현식에 사용된 연산자를 실행하여 계산된다.
# 사칙연산자 등 많이 사용되는 수학 연산자의 
# 우선순위는 일반적으로 알려진 것과 동일하다.
# 
# * 괄호 안에 있는 표현식을 가장 먼저 계산한다. 
#     
#     ```python
#     2*(3-1) => 2*2 => 4
#     (1+1)**(5-2) => 2**(5-2) => 2**3 => 8
#     ```
#     
# * 거듭제곱의 우선순위가 사칙연산보다 높다.
# 
#     ```python
#     3**2*2 => (3**2)*2 => 9*2 => 18
#     3*2**2 => 3*(2**2) => 3*4 => 12
#     ```
#     
# * 곱셈과 나눗셈을 덧셈과 뺄셈보다 먼저 계산한다. 
# 
#     ```python
#     2*3-1 => (2*3)-1 => 6-1 => 5
#     6+4/2 => 6+(4/2) => 6+2 => 8
#     ```
#     
# * 곱셈과 나눗셈은 서로 우선순위가 같다.
# * 덧셈과 뺄쎔도 서로 우선순위가 같다.
# * 같은 우선순위를 갖는 연산자가 연속해서 나오면 (거듭제곱을 제외하고) 왼쪽에서 오른쪽으로 계산된다. 
# 
#     ```python
#     60/2*3 => (60/2)*3 => 30*3 => 90
#     ```
#     
# * 거듭제곱이 연속해서 나오면 오른쪽에서 왼쪽으로 계산된다. 
# 
#     ```python
#     2**3**2 => 2**(3**2) => 2**9 => 512
#     ```
# :::

# ### 함수

# **수학에서의 함수**

# 수학에서의 함수는 다음과 같이 사칙연산과 거듭제곱을 포함하여
# 삼각함수와 지수 및 로그 함수 등
# 주어진 값을 이용하여 새로운 값을 계산한다.
# 
# - $f(x) = ax + b$, 
# - $g(x, y) = a x^2 + b y^2$, 
# - $pow(x, y) = x ^ y$
# - $h(x) = \sin x$,
# - $k(x) = \log x$,
# - $root(x) = \sqrt{x}$

# 언급된 함수 중에서 $\sin$ 과 $\log$, 그리고 제곱근 함수 $\sqrt{\,\,\,}$ 등은 
# `math` 모듈에 포함되어 있다.
# 아나콘다 패키지를 설치한 경우 `numpy` 모듈도 많은 함수를 제공한다.
# 
# 언급된 함수들을 사용하려면 먼저 해당 모듈을 불러와야 한다. 
# 예를 들어 `math` 모듈을 사용하려면 다음과 같이 한다.

# In[18]:


import math


# 그러면 `sin()`, `log()`, `sqrt()` 함수 등을 이용할 수 있다.
# 단, 불러온 모듈 이름과 함께 사용한다.
# 
# - $\sin(\pi/2)$

# In[19]:


# 원주율 
pi = 3.14

math.sin(pi/2)


# - $\sqrt{2}$

# In[20]:


math.sqrt(2)


# `math.log()`는 자연로그 함수를 가리킨다.

# - $\log(10)$

# In[21]:


math.log(2.71)


# 상용로그 함수는 다음과 같다.

# - $\log_{10}(10)$

# In[22]:


math.log10(10)


# **프로그래밍에서의 함수**

# 앞서 보았듯이 수학에서의 함수를 프로그래밍에서 그대로 사용한다.
# 하지만 프로그래밍에서 함수의 의미는 수학에서의 함수와는
# 다른 역할도 가질 수 있다.
# 
# 예를 들어, 
# `print()` 함수는 어떤 값을 계산하는 일은 하지 않고
# 지정된 값을 화면에 출력하는 기능을 수행한다.
# 프로그래밍에서의 함수의 기능에 대한 자세한 설명은
# {numref}`%s장 <ch:functions>`에서 다룬다.
# 여기서는 앞서 수학에서 사용되는 함수들을 프로그래밍에서
# 동일한 방식으로 사용할 수 있다는 점만을 강조한다.

# (sec:representation)=
# ### 표현식

# `'안녕하세요!'`, `18`, `3.1415926535897932` 등은 변수에 할당하거나 
# 연산 등에 사용할 수 있는 값이다. 
# 그리고 `num`이 하나의 값을 가리키면 다음 표현들 모두 각각 하나의 값을 가리킨다.
# 
# ```python
# num + 2
# math.sqrt(num)
# (1, num+2, math.sqrt(num))
# ['파이썬', '좋아요]
# hello' + ' python'
# ('hello', ' python')
# ```
# 
# 이처럼 값들을 이용한 연산과 함수 적용, 값들의 리스트 또는 튜플 등 새로운 값을 무한정 만들어 낼 수 있다.
# 이렇게 다양한 방식으로 값을 표현하는 데에 사용되는 식을 
# **표현식**<font size="2">expression</font>이라 부른다.

# ::::{admonition} 주의
# :class: caution
# 
# 표현식을 작성할 때 사용되는 연산자나 함수의 특성을 고려해야 한다.
# 예를 들어, 곱셈 연산자는 두 개의 인자를 받는데, 
# 정수 또는 유한소수 두 개의 곱을 표현하거나
# 문자열과 정수의 곲을 표현해야 한다.
# 만약에 두 문자열의 곱을 계산하려 하면 오류가 발생한다.
# 즉, 적절한 표현식으로 인정받지 못한다.
# 
# ```python
# >>> '파이썬' * '좋아요'
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# TypeError: can't multiply sequence by non-int of type 'str'
# ```
# 
# 동일한 이유로 아래 표현식들도 허용되지 않는다. 
# 
# ```python
# '파이썬' - 'k-팝'
# 3 / '피자'
# ```
# ::::

# ## 값과 자료형

# 모든 값들은 각각 고유의 **자료형**<font size="2">data type</font>을 갖는다.
# 예를 들어,
# 
# * `-2`, `-1`, `0,` `1`, `2`, ... 등 **정수**의 자료형은 `int`이고,
# * `3.141592`, `2.71`, `-0.23` 등 유한소수의 자료형은 **부동소수점** 자료형인 `float`이고,
# * `'강아지'`, `'Hello, World!'`, `'파이썬은 재밌어요!'` 등의 단어 또는 문장의 자료형은
#     **문자열** 자료형인 `str`이다. 

# ### 변수의 자료형

# 선언된 변수의 자료형은 변수가 현재 가리키는 값의 자료형과 동일하다.

# In[23]:


num = 18
type(num)


# 변수에 할당된 값이 달라지면 변수의 자료형도 달라질 수 있다.

# In[24]:


num = 3.14
type(num)


# In[25]:


num = '3.14'
type(num)


# ### 표현식의 자료형

# `3 * 2`, `"Hello, Python" + "!"`, `math.sqrt(2)`, `x/2` 등의 표현식의 자료형은
# 표현식이 가리키는 값의 자료형을 갖는다.
# 반면에 튜플과 리스트의 자료형은 사용된 항목의 자료형에 상관 없다.
# 즉, 튜플 언제나 튜플이고 리스트는 언제나 리스트이다.

# 아래 표는 표현식과 해당 표현식이 표현하는 값, 그리고 값의 자료형 사이의 관계를 보여준다.
# 단, `x` 는 정수 `3`을 가리킨다고 가정한다.
# 
# | 표현식 | 값 | 자료형 |
# | ---   |--- | ---   |
# | `x`  | `3`  | `int` |
# | `x/2`  | `1.5`  | `float` |
# | `3 * 2` | `6` | `int` |
# | `"Hello, Python" + "!"` | `"Hello, Python!"` | `str`|
# | `math.sqrt(2)` | `1.4142135623730951`| `float` |
# | `(x/2 - 1) < 0` | `False` | `bool` |
# | `(1, x/2-1, x+x+1)`  | `(1, 0.5, 7)`  | `tuple` |
# | `[x, x*3/2, x**3+1]`  | `[3, 4.5, 28]`  | `list` |

# ### `type()` 함수

# `type()` 함수는 인자로 사용된 값의 자료형을 확인해준다.

# In[26]:


type(-7)


# In[27]:


type(3.141592)


# In[28]:


type('파이썬 좋아요!')


# In[29]:


x = 3
type((1, x/2-1, x+x+1))


# In[30]:


type([x, x*3/2, x**3+1])


# ### 수 표기법

# 수<font size="2">number</font>를 표기할 때 다음 사항들에 주의해야 한다.
# 
# 첫째, `'17'`, `'3.2'` 등은 작은따옴표로 둘러싸여 있어서
# 수가 아닌 숫자 기호들로 이루어진 문자열이며,
# 연산이 다르게 작동한다. 

# In[31]:


type('17')


# In[32]:


'1.7' + '3.2'


# 둘째, 수를 표기할 때 쉼표(콤마)를 사용하면 다른 의미로 해석된다.
# 예를 들어 `1,000,000` 이라고 입력하면 백만이 아니라 1, 0, 0 세 개의 수를 항목으로 갖는 
# 길이가 3인 튜플 자료형으로 인식된다.
# **튜플**<font size="2">tuple</font>은 여러 개의 값을 
# 하나로 묶어서 사용하는 값을 가리키며
# 나중에 자세히 다룬다.

# In[33]:


저는튜플입니다 = 1,000,000


# In[34]:


type(저는튜플입니다)


# In[35]:


print(저는튜플입니다)


# 셋째, 0으로 시작하면 안된다.
# 예를 들어 서울 지역의 우편번호는 0으로 시작하는데
# 이런 우편번호를 정수처럼 작성하면 문제가 발생한다.
# 
# ```python
# # 우편번호
# >>> zipcode = 03048
#   File "<stdin>", line 1
#     zipcode = 03048
#                   ^
# SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers
# ```    
# 
# 우편번호는 사실 구역 식별용이기에 
# 고유명사처럼 문자열로 처리하는 게 맞다.

# In[36]:


# 우편번호
zipcode = '03048'


# ## 연습문제

# 참고: [(실습) 변수, 값, 표현식](https://colab.research.google.com/github/codingalzi/pybook/blob/master/practices/practice-variables_expressions.ipynb)
