#!/usr/bin/env python
# coding: utf-8

# # 함수

# 프로그램은 명령문의 합성으로 구현된다. 
# 그런데 특정 기능을 수행하는 명령문의 일부가 너무 길거나,
# 반복적으로 사용되어 보다 편하게 사용하고 싶거나
# 프로그램을 보다 체계적으로 구현하도록 하고 싶을 때가 있다.
# 그럴 때 특정 기능을 수행하는 명령문에 이름을 주고
# 필요에 따라 해당 이름을 대신 활용할 수 있다.
# 
# 예를 들어 `print('함수란 ...')`는 실행되면 
# `print()` 함수에 내재된
# 명령문이 작동하여 모니터 화면에 
# 문자열 `함수란 ...`을 출력한다.
# 그런데 `print()` 함수에 내재된 어떤 명령문이 정확히 무슨 일을 하는지
# 사용자는 쉽게 알지 못하고 또 굳이 알 필요도 없다. 
# 화면에 문자열을 출력하고 싶을 때 `print()` 함수를 
# 사용할 수 있다는 사실만 기억하고 있으면 된다.
# 
# 이렇게 함수는 함수의 이름에 가려진 명령문을 대행하며
# 해당 명령문을 실행하려면 지정된 함수를 
# **호출**<font size="2">call</font>하면 된다.

# ## 함수 호출

# **함수 호출**<font size="2">function call</font>은
# 함수 이름과 연관된 명령문을 실행하도록 하는 일종의 명령문이다.
# 함수 호출의 일반적인 형식은 다음과 같다. 
# 
# ```python
# 함수이름(인자1, 인자2, ..., 인자n)
# ```

# `print()` 함수를 호출하는 방식은 다음과 같다.

# In[1]:


print('함수란 ...')


# `int()` 함수는 소수점 이하를 버리는 명령문을 실행한다.

# In[2]:


int(3.14)


# `type()` 함수는 인자의 자료형을 확인하는 명령문을 실행한다.

# In[3]:


type(2.37)


# :::{admonition} 인자를 받지 않는 함수의 호출
# :class: info
# 
# 인자를 사용하지 않는 함수라 하더라도
# 함수 호출은 열고닫기 괄호를 반드시 사용해야 한다.
# 예를 들어 `dir()` 함수는 인자 없이 호출하면 현재 사용가능한 함수 또는 변수의 
# 목록을 반환한다.
# 
# ```python
# >>> dir()
# ['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__']
# ```
# 
# 반면에 괄호를 사용하지 않으면 예를 들어
# `dir` 가 내장 함수임을 확인해준다.
# 
# ```python
# >>> dir
# <built-in function dir>
# ```
# 
# **내장 함수**<font size="2">built-in function</font>란 파이썬에서 기본으로 제공하는 함수라는 의미이다. 

# ### 함수의 인자

# 모든 함수는 호출될 때 적절한 개수의 인자를 사용해야 한다.
# 그렇지 않은 경우 오류가 발생한다. 
# 예를 들어, `type()` 함수는 1개 또는 3개의 인자와 함께 
# 호출되어야 하며, 그렇지 않은 경우 아래와 같은 
# 오류가 발생한다.
# 
# ```python
# >>> type()
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# TypeError: type() takes 1 or 3 arguments
# ```

# :::{admonition} 세 개의 인자를 사용하는 `type()` 함수
# :class: info
# 
# `type(2.37)`처럼 하나의 인자를 사용하면 인자의 자료형을 확인해준다.
# 반면에 세 개의 인자를 사용하는 경우는 특정 클래스의 객체를 
# 생성할 때 사용하며, 여기서는 자세히 다루지 않는다.
# :::

# ### 함수의 반환값과 `return` 키워드

# 함수를 호출하면 함수에 의해 지정된 명령문을 실행한 후에
# 최종적으로 어떤 값을 
# 반환<font size="2">return</font>하기도 한다.
# 반환값은 `return 반환값` 형식의 명령문으로 지정된다.
# 
# 예를 들어 `int(3.14)`는 정수 `3`을, 
# `type(2.37)`은 부동소수점의 자료형인 `float`를
# 함수 실행의 결괏값으로 반환하며,
# 반환된 값은 다른 연산에 재활용될 수 있다.

# In[4]:


y = int(3.14)
y + 1


# :::{admonition} 자료형과 값
# :class: info
# 
# `int`, `float` 등과 같은 자료형도 하나의 값으로 취급한다. 
# 앞으로 보겠지만, 파이썬에서 다루는 모든 **객체**<font size="2">object</font>는
# 값으로 사용될 수 있다.
# :::

# ### `print()` 함수와 `None` 값

# 파이썬은 모든 함수가 반환값을 갖도록 강제한다.
# `print()` 함수처럼 반환값이 없는 것처럼 보이는 함수도
# 공식적으로는 아무런 의미가 없는 값을 의미하는 `None`을
# 반환값으로 사용한다.
# 
# `None`은 `NoneType` 자료형에 속하는 하나의 값이다.
# 따라서 변수 할당에 사용되어 저장될 수 있다.
# 하지만 연산 등에 사용하면 오류가 발생한다.
# 즉, 아무런 기능을 수행하지 못한다. 
# 
# ```python
# >>> x = None
# >>> x + 1
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'
# ```

# `print()` 함수에 의해 
# 화면에 출력되는 문자열은 반환값이 아니고
# 화면에 지정된 값을 출력하는 명령문의 실행 결과에 불과하다.
# 함수의 반환값은 변수에 할당해서 활용할 수 있지만 
# 화면에 출력된 문자열은 그럴 수 없다는 데서 `print()` 함수는 특정한 반환값을
# 생성하지 않고, 대신에 `None`이 반환값으로 사용된다는 것을 확인할 수 있다.
# 
# 예를 들어 아래 할당 명령문을 실행할 때 화면에 보여지는 `3.14`는 
# 변수 `x`가 가리키는 값이 아니다.

# In[5]:


x = print(3.14)


# 변수 `x`는 `None`을 가리킨다.

# In[6]:


print(x)


# ## 형변환 함수

# 부동소수점 또는 정수 모양의 문자열을 정수로 변환하는 `int()` 함수는
# 하나의 자료형을 다른 자료형으로 변환된 값을 반환한다.
# 이처럼 자료형을 변환하는 것을 **형변환**<font size="2">type casting 또는 type conversion</font>라 하며
# 파이썬은 다양한 형변환 함수를 제공한다.
# `int()` 이외에 대표적으로 정수 또는 부동소수점 모양의 문자열을 부동소수점으로
# 변환하는 `float()` 함수,
# 모든 값을 문자열로 변환하는 `str()` 함수가 있다. 

# In[7]:


int(3.14)


# In[8]:


int('3')


# In[9]:


float(27)


# In[10]:


float('27.25')


# In[11]:


str(3.15)


# In[12]:


str(22)


# ## 수학 함수

# $\sin x$, $\cos x$, $\sqrt{x}$, $\log x$, $e^x$ 등
# 수학에서 많이 사용되는 함수를 파이썬에서 기본으로 제공한다. 

# ### `math` 모듈

# 파이썬에서 기본으로 제공하는 다양한 수학 함수를 사용하려면 먼저
# `math` 라는 모듈<font size="2">module</font>을 
# 불러와야<font size="2">import</font> 한다.
# 모듈은 {numref}`%s 장 <ch:module>`에서 자세히 살펴볼 것이며, 
# 여기서는 모듈이 다양한 함수를 모아 놓은 파이썬 코드 파일이라는 
# 사실 정도만 기억하면 된다.
# `math` 모듈을 불러오는 방식은 다음과 같다.

# In[13]:


import math


# :::{admonition} 자료형과 값
# :class: info
# 
# 앞서 언급했듯이 파이썬에 다루는 모든 객체는 특정 
# 자료형에 속하는 하나의 값이다.
# `math` 모듈 조차도 하나의 값이며
# `module` 자료형에 속한다.
# 
# ```python
# >>> type(math)
# <class 'module'>
# ```
# :::

# 모듈에 포함된 함수를 호출하려면 모듈과 함수를 구두점으로 구분해서 명시해야 한다.
# 예를 들어 정수 10을 밑으로 하는 상용로그 함수 $\log_{10}$에 해당하는 
# `log10()` 함수를 사용하는 방법은 다음과 같다.

# In[14]:


math.log10(10)


# In[15]:


10 ** math.log10(100)


# `math.log()`는 자연로그 함수($\ln = \log_e$)를 가리킨다.

# In[16]:


math.log(10)


# In[17]:


math.log(2.718281828459045)


# `math.sqrt()`는 제곱근 함수 $\sqrt{x}$를 가리킨다.

# In[18]:


math.sqrt(2)


# `math.exp()`는 지수 함수 $e^x$를 가리킨다.

# In[19]:


math.exp(1)


# ::::{prf:example}
# :label: degree2radian
# 
# 일반각의 각도<font size="2">degree</font>를 
# 호도법의 라디안<font size="2">radian</font>으로 
# 변환하는 공식은 다음과 같다.
# 
# $$
# \text{라디안} = \frac{\text{각도}}{180} \, \pi
# $$
# 
# 일반각 90도를 라디안으로 변환한 후에 
# 사인<font size="2">sine</font>값을 계산하는 과정은 다음과 같다.
# `math.pi`는 원주율을 가리킨다.
# 
# ```python
# >>> degree = 90
# >>> radian = degree / 180.0 * math.pi
# >>> math.sin(radian)
# 1.0
# ```

# ### NumPy 패키지

# [넘파이<font size="2">NumPy</font>](https://numpy.org)는 
# 행렬, 다차원 배열 등을 효율적으로 빠르게 
# 처리하는 많은 수학 함수를 지원하는 파이썬 라이브러리 패키지이며
# 데이터분석, 계산과학 등 컴퓨터를 이용한 계산이 필요한 영역에서 많이 활용된다.
# 파이썬의 기본 패키지에는 포함되지 않지만
# 계산과학 툴킷인 
# [아나콘다 파이썬 배포판<font size="2">Anaconda Python distribution</font>](https://www.anaconda.com)은
# 함께 지원한다.

# :::{admonition} 모듈과 패키지
# :class: info
# 
# 패키지<font size="2">package</font>는 일종의 모듈 모음집이다.
# 즉, 많이 활용되는 함수 등을 기능과 분야별로 여러 개의 모듈로 분류해서 모아놓은 것을 가리킨다.
# 패키지와 모듈은 하나의 폴더 안에 내용에 따라 여러 개의 파일로 정리하는 개념과 유사하다.
# 파일이 많아지면 폴더를 여러 개의 하위 폴더로 분류해서 파일을 분류하는 것처럼
# 패키지를 여러 개의 하위 패키지로 구분하기도 한다.
# 하위 패키지에 포함된 모듈의 활용법도 기본적으로 모듈의 함수를 사용하는 방법과 동일하다.
# 나중에 그래프를 그릴 때 필요한 패키지와 모듈을 사용해야 할 때 활용 예제를 보게 될 것이다.
# :::

# 넘파이 패키지는 앞서 언급한 `math` 모듈에서 지원하는 함수들을 포함해서 보다 많은 함수와 기능을 지원한다.
# 앞으로 필요할 때마다 하나씩 넘파이가 제공하는 기능을 활용할 것이다. 
# 넘파이를 사용하려면 먼저 `numpy` 모듈을 불러오면 된다.
# 그런데 `numpy`를 보통 `np`라는 약칭으로 아래처럼 불러온다.

# In[20]:


import numpy as np


# 모듈에 포함된 함수를 사용하는 방식은 `math.sqrt()` 처럼 구두점을 사용한다.
# 다만 약칭이 지정된 모듈은 반드시 이용해서 사용해야 한다.
# 
# `math` 모듈에 포함된 함수의 이름이 `numpy` 모듈에서 거의 동일하게 사용되었다.

# In[21]:


np.log10(10)


# In[22]:


np.log(2.72)


# In[23]:


np.sqrt(2)


# In[24]:


np.exp(1)


# In[25]:


degree = 90
radian = degree / 180.0 * np.pi
np.sin(radian)


# :::{admonition} 동일 이름의 두 함수
# :class: warning
# 
# `math`, `numpy` 두 모듈에 포함된 많은 함수가 동일한 이름을 사용한다.
# 하지만 함수의 이름이 갖다고 해서 동일한 함수는 아니다.
# 서로 다른 모듈에 속하는 동일 이름의 함수는
# 비록 반환값이 같을 수는 있어도 반환값 계산에 사용된 명령문은
# 기본적으로 다르다. 
# 실제로 `numpy` 모듈이 제공하는 수학 함수가 `math` 모듈이
# 제공하는 동일 이름의 수학 함수보다 실행속도가 빠른 경우가 많다. 
# :::

# ## 함수 정의하기

# 파이썬에서 사용자가 임의로 함수를 정의해서 사용할 수 있다.
# 함수를 정의하는 방식은 다음과 같다.
# 
# ```python
# def 함수이름(매개변수1, 매개변수2, ..., 매개변수n):
#     명령문
# ```
# 
# 키워드 `def` 로 시작하는 첫쨋줄은 함수의 기본 정보를 담은 **헤더**<font size="2">header</font>이고
# 나머지는 함수의 **본문**<font size="2">body</font>이다.
# 함수의 본문은 함수가 호출되었을 때 실행해야 하는 명령문을 담는다.
# 
# 문법적으로 다음 두 가지 사항에 주의해야 한다.
# 
# - 함수 이름 짓기는 변수 이름 짓기와 동일한 조건을 따라야 한다.
# - 함수 본문에 사용되는 명령문은 들여쓰며, 보통 한 번의 탭<font size="2">tab</font> 키 누르기에 
#     해당한다.

# ### 함수의 반환값

# 함수의 반환값은 본문에 사용된 명령문을 실행하다가
# 어느 순간 아래 모양의 기본 명령문을 실행하는 순간 결정된다.
# 
# 
# ```python
# return 표현식
# ```
# 
# 위 `return` 명령문이 실행되는 순간
# 지정된 `표현식`이 가리키는 값이 반환되면서 함수의 실행이 멈춘다.

# :::{admonition} `print()` 함수와 `return None` 명령문
# :class: info
# 
# `print()` 함수의 반환값이 없다는 의미는
# `return` 명령문이 `print()` 함수의 본체에 포함되지 않았다는 것을 의미하며,
# 이런 경우 파이썬 해석기는 `return None`을 자동으로 실행한다.
# :::

# ### 매개 변수와 인자

# **매개 변수**<font size="2">parameter</font>는
# 함수 호출에 사용되는 **인자**<font size="2">argument</font>를
# 함수 본문 명령문에 전달하는 역할을 수행한다.
# 전달방식은 각 매개 변수가 지정된 인자를 가리키도록 하는 변수 할당을 통해 이루어진다.
# 
# 함수 호출이 다음과 같이 진행되었다고 가정하자.
# 
# ```python
# 함수이름(인자1, 인자2, ..., 인자n)
# ```
# 
# 그러면 함수의 본문에 포함된 명령문이 실행되기 이전에 다음 할당 명령문이 먼저 실행된다.
# 
# ```python
# 매개변수1 = 인자1
# 매개변수2 = 인자2
# ...
# 매개변수n = 인자n
# ```

# ::::{prf:example}
# :label: myAdd
# 
# 두 숫자의 합을 계산하는 함수 `myAdd`를 아래와 같이 직접 정의할 수 있다.
# 더해야 할 두 개의 값을 입력받아야 하기에 두 개의 매개 변수가 필요하다.
# 
# ```python
# def myAdd(left, right):
#     z = left + right
#     return z
# ```
# 
# 이제 `myAdd(-2, 5)`를 실행하면 아래 명령문이 실행된다.
# 
# ```python
# left = -2
# right = 5
# z = left + right
# ```
# 
# 결국 `z`는 정수 `3`을 가리키게 되어 함수의 실행은 3을 반환<font size="2">return</font>하면서 종료한다.
# ::::

# ::::{prf:example} 인자 없는 함수
# :label: no-parameters
# 
# 매개 변수를 사용하지 않는 함수라 하더라도 괄호를 반드시 사용해야 한다.
# 
# ```python
# >>> def myPrint():
# ...     print("인자 없어요!")
# ...
# >>> myPrint()
# 인자 없어요!
# ```
# ::::

# ### 키워드 인자

# `print()` 함수는 여러 개의 인자를 받을 수 있다.
# 그러면 각 인자를 공백<font size="2">space</font>으로 구분하여
# 함께 한 줄에 출력한다.

# In[26]:


print('Hello,', 'Python', '!')


# 그런데 각각의 인자를 서로 다른 줄에 출력하려면 아래와 같이 해야 한다.

# In[27]:


print('Hello,', 'Python', '!', sep='\n')


# `sep='\n'`의 `sep`은 `print()` 함수의 숨겨진 매개 변수이며
# 인자를 굳이 지정하지 않으면 **키워드 인자**<font size="2">keyword argument</font>로 
# 지정된 값을 사용한다.
# 매개 변수 `sep`의 원래 키워드 인자는 한 칸 띄어쓰기를 의미하는 문자열(`' '`)이며,
# 사용된 인자들을 한 칸씩 띄어서 한 줄에 보여주도록 한다.
# 
# `print()`함수에는
# `sep` 이외에 `end`, `file`, `flush`가
# 키워드 인자를 갖는 매개 변수이다.
# 실제로 `print()` 함수의 헤더는 다음과 같다.
# 
# ```python
# print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)
# ```
# 
# - 둘째 매개 변수 자리에 위치한 말줄임표(`...`)는 
#     여러 개의 값이 인자로 사용될 수 있음을 의미한다.
# - `end='\n'` 매개 변수는 지정된 인자들을 출력한 후에 
#     기본적으로 줄바꿈을 실행하는 것을 의미한다.
#     `end=''`로 설정하면 줄바꿈을 하지 않게 된다. 
#     아래 두 경우를 비교하면 차이점을 확인할 수 있다.
# 
#     먼저 `end='\n'` 기본값을 그대로 사용하는 경우엔 굳이 언급하지 않는다.
# 
#     ```python
#     >>> print('Hello,', 'Python', '!', sep='\n')
#     Hello,
#     Python
#     !
#     >>>
#     ```
# 
#     다음은 줄바꿈을 나타내는 문자열 `'\n'` 대신 
#     아무런 문자도 포함하지 않는 빈 문자열 `''`를 `end` 매개 변수의 인자로 사용한다.
# 
#     ```python
#     >>> print('Hello,', 'Python', '!', sep='\n', end='')
#     Hello,
#     Python
#     !>>>
#     ```

# :::{admonition} `file`과 `flush` 매개 변수
# :class: info
# 
# `print()` 함수의 `file`과 `flush` 두 매개 변수는 특별한 경우에 활용되며
# 간단한 예제는 [이곳](https://velog.io/@janeljs/python-print-sep-end-file-flush)에서 확인할 수 있다.
# :::

# ::::{prf:example}
# :label: keyword_argument
# 
# 아래 함수는 `myAdd()` 처럼 두 인자의 합을 구한다.
# 다만 둘째 매개 변수가 10을 키워드 인자로 사용한다.
# 
# ```python
# def myAdd10(left, right=10):
#     add10 = left + right
#     return add10
# ```
# 
# 따라서 둘째 인자를 반드시 입력하지 않아도 되며,
# 그럴 경우 둘째 인자는 자동으로 10이 된다.
# 
# ```python
# >>> myAdd10(5) # right=10
# 15
# ```
# 
# 둘째 인자를 별도로 지정하면 지정된 값이 사용된다.
# 
# ```python
# >>> myAdd10(5, right=20)
# 25
# ```
# ::::

# ### 함수 합성과 함수 호출 표현식

# 수학에서 $f$, $g$ 두 개의 함수를 합성해서 새로운 함수 $f\circ g$ 를 
# 다음과 같이 정의한다.
# 
# $$
# (f\circ g) (x) := f(g(x))
# $$
# 
# 동일한 방식으로 파이썬 함수를 합성하여 새로운 표현식을 정의할 수 있다.
# 다음은 곱셈, 나눗셈, 사인 함수의 합성을 활용한 표현식이다.
# 
# ```python
# math.sin(degree / 360.0 * 2 * math.pi)
# ```
# 
# `f(x1, ..., xn)` 등의 함수 호출 표현식이 가리키는 값은
# 함수 본문에 지정된 명령문이 
# 실행되는 도중에 만나는 `return 표현식` 명령문의 `표현식`이 가리키는 값이다.
# 예를 들어 아래 코드에서 변수 `x` 가 가리키는 값은 지수승 함수 `np.exp()`가
# `np.log(2)`를 인자로 사용해서 계산된 반환값을 가리킨다.

# In[28]:


x = np.exp(np.log(2))


# ### 프로그램 실행과 함수 호출

# 파이썬 프로그램의 실행은 기본적으로 
# "위에서 아래로"와 "왼쪽에서 오른쪽으로"의 두 기준으로
# 더 이상 실행할 명령문이 없을 때까지 진행된다.
# 
# 그런데 프로그램 실행 도중에 
# 함수 호출이 발생하면 함수의 실행이 종료될 때까지 이후 명령문은 대기한다. 
# 함수 호출은 프로그램 실행 도중에 발생하는 일종의 "나들이"이다. 
# 즉, 프로그램 실행 도중 잠시 일을 멈추고 다른 일을 먼저 완료하는 기능이며
# 나들이 도중에 얻어진 결과물을 이어서 활용할 수 있다.
# 
# 물론 함수 본문에서 다른 함수를 호출할 수도 있기 때문에 
# 프로그램의 실행은 무한정 복잡해질 수 있다.
# 다행히도 파이썬 해석기가 프로그램의 실행 과정을 철저하게 
# 추적하고 관리한다. 

# ## 지역 변수와 전역 변수

# 함수를 선언할 때 사용되는 매개 변수와 함수 본문에서 선언되는 변수는 
# 함수가 실행되는 동안에만 의미를 가지며, 
# 이런 의미에서 **지역 변수**<font size="2">local variable</font>라 한다.
# 반면에 함수 밖에서도 의미를 갖는 변수는 **전역 변수**<font size="2">global variable</font>이다. 
# 
# 아래 코드에서 `hour_to_min()` 함수는 시간을 분으로 변환한 값을 반환한다. 
# 매개 변수 `hour`와 함수 본문에서 선언된 `minutes` 변수는 모두 지역 변수이다.
# 반면에 `two_hour` `hour_to_min(2)`의 실행 결괏값을 가리키는 전역 변수이다. 

# In[29]:


def hour_to_min(hour):
    minutes = hour * 60
    return minutes

two_hour = hour_to_min(2)


# 위 코드의 실행 결과 `two_hour` 변수는 120을 가리킨다.

# In[30]:


print("2 시간은", two_hour, "분입니다.")


# 반면에 `minutes`와 `hour` 두 지역변수는 더 이상 존재하지 않으며
# 두 변수가 가리키는 값을 확인하려 시도하면 이름이 존재하지 않음을 의미하는
# `NameError` 오류가 발생한다. 

# ```python
# >>> print(minutes)
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# NameError: name 'minutes' is not defined
# ```

# ```python
# >>> print(hour)
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# NameError: name 'hour' is not defined
# ```

# :::{admonition} 파이썬 튜터 활용: 지역 변수의 생존 주기
# :class: info
# 
# [PythonTutor:지역 변수 전역 변수](http://pythontutor.com/visualize.html#code=def%20hour_to_min%28hour%29%3A%0A%20%20%20%20minutes%20%3D%20hour%20*%2060%0A%20%20%20%20return%20minutes%0A%0Atwo_hour%20%3D%20hour_to_min%282%29%0Aprint%28minutes%29&cumulative=false&curInstr=0&heapPrimitives=nevernest&mode=display&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false)에서
# `hour`와 `minutes`의 생존주기, 즉, 언제 생성되고 언제 사라지는지를 시각적으로 확인할 수 있다.
# :::

# ## 함수 호출과 스택 다이어그램

# 함수의 실행 중에 발생하는 모든 정보는 
# 컴퓨터 메모리 상의 
# **스택**<font size="2">stack</font>이란 영역에서 관리된다.
# 
# 하나의 함수가 실행되면 곧바로 하나의 
# **프레임**<font size="2">frame</font>이 생성되어
# 해당 함수의 실행 과정 중에 발생하는 지역 변수의 생성 및 값 할당, 할당된 값 업데이트 등을
# 관리한다.
# 
# 함수의 실행과 함께 생성된 프레임은 
# 함수의 실행이 종료되면 해당 함수의 반환값을 지정된 변수에 할당하면서 동시에 
# 바로 스택 영역에서 사라진다. 

# In[ ]:





# 다른 프레임에 넘겨 준 후에 사라지는 과정이 반복된다. 이렇게 특정 함수 호출과 관련된 프레임을 **지역 프레임**이라 
# 부른다.
# 반면에 프로그램이 실생되는 전 과정동안 살아 있는 프레임을 **전역 프레임**이라 부른다. 
# 
# 예를 들어, 앞서 지역 변수와 전역 변수를 설명하면서 사용한 코드를 
# [PythonTutor:지역 변수 전역 변수](http://pythontutor.com/visualize.html#code=def%20hour_to_min%28hour%29%3A%0A%20%20%20%20minutes%20%3D%20hour%20*%2060%0A%20%20%20%20return%20minutes%0A%0Atwo_hour%20%3D%20hour_to_min%282%29%0Aprint%28minutes%29&cumulative=false&curInstr=0&heapPrimitives=nevernest&mode=display&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false)에서 
# 실행하면서 프레임의 변화를 살펴볼 수 있다. 
# 
# 위 프로그램을 한 단계씩 실행할 때 아래 사항들에 생각하면서 메모리 상태의 변화를 살펴보아야 한다. 
# 
# * 전역 변수와 함수들은 전역 프레임(global frame)에서 다룬다.
# * 지역 변수들은 함수가 호출되면 생성되어 지역 변수들의 정보를 다루다가, 함수의 실행이 종료되면 
#     모든 정보와 함께 사라진다. 
#     예를 들어, 마지막 그림에서 `minutes` 값을 확인하고자 할 때 오류가 발생하는 이유가 
#     `hour_to_min` 함수가 호출될 때 생성된 지역 프레임이 함수의 실행이 종료되면 사라지기 때문이라는 
#     점을 눈으로 확인할 수 있다.
# 
# 반면에 재귀함수의 실행과정 동안 많은 프레임의 생성과 소멸이 발생한다.
# 그리고 이런 프레임들의 변화가 스택(stack) 형식으로 이루어지는데,
# 따라서 그와 같은 프레임들의 변화를 **스택 다이어그램**(stack diagram)이라 부른다.

# ### 고계 함수와 제1종 객체

# 파이썬에서는 함수도 하나의 값으로 간주된다.
# 이렇게 하나의 값으로 간주되는 객체를
# **제1종 객체**(first-class object)라고 부른다.
# 제1종 객체로 간주되는 값은 변수에 할당되거나, 함수의 인자 또는 반환값으로 사용될 수 있다.
# 
# 함수를 인자로 받거나 내주는 값으로 사용하는 함수를 **고계 함수**(higher-order function)라 부른다.

# ## 연습문제 

# 1. 다음 조건을 만족시키는 `right_justify`라는 함수를 정의하라.
#     * 인자는 하나만 받으며, 매개 변수는 `s`라 부른다.
#     * 문자열 하나를 인자로 받아 실행하면 해당 문자열의 끝이 20번째 칸에 위치하도록 
#         입력받은 문자열 앞에 충분한 공백이 위치하도록 출력(print)한다. 
# 
#     ```python
#     >>> right_justify('monty')
#                        monty
#     ```                                                                 
# 
#     힌트: 문자열 결합 및 반복, 그리고 문자열의 길이를 되돌려주는 내장함수 `len` 활용 가능.
#     <br><br>
# 1. 파이썬은 정의된 함수도 하나의 값으로 취급한다. 
#     따라서 함수를 다른 함수의 인자로 사용하거나 변수에 할당되는 값으로 사용될 수 있다. 
#     예를 들어, 아래에 정의된 `do_twice` 함수는 함수 `f`를 인자로 입력받으면
#     그 함수를 두 번 호출하여 실행하도록 하는 함수이다. 
#     
#     ```python
#     def do_twice(f):
#         f()
#         f()
#     ```
#     
#     그리고 `print_spam` 이라는 함수를 두 번 호출하도록 `do_twice`를 활용하고자 하면 
#     아래와 같이 프로그램을 작성하면 된다.
#     
#     ```python
#     def print_spam():
#         print('spam')
# 
#     do_twice(print_spam)
#     ```
#     
#     1. 이 프로그램을 직접 입력해서 실행해 보라.
#     1. 아래 조건을 만족하도록 `do_twice` 함수를 수정하라. 
#         * 두 개의 인자를 사용한다.
#         * 첫째 매개 변수는 하나의 인자를 받는 함수를 인자로 입력받는다.
#         * 둘째 매개 변수는 첫째 인자에 사용된 함수의 인자로 사용될 수 있는 값을 인자로 입력받는다.
#         * 첫째 인자로 사용된 함수를 둘째 인자로 사용된 값을 이용하여 두 번 연속 호출한다. 
#     1. 아래 조건을 만족하도록 `do_four` 함수를 수정하라. 
#         * 두 개의 인자를 사용한다.
#         * 첫째 매개 변수는 하나의 인자를 받는 함수를 인자로 입력받는다.
#         * 둘째 매개 변수는 첫째 인자에 사용된 함수의 인자로 사용될 수 있는 값을 인자로 입력받는다.
#         * 첫째 인자로 사용된 함수를 둘째 인자로 사용된 값을 이용하여 네 번 연속 호출한다. 
#         * 앞서 정의된 `do_twice` 함수를 반드시 활용한다.
#     <br><br>
#     답: http://greenteapress.com/thinkpython2/code/do_four.py
# <br><br>
# 1. 다음과 같은 격자를 그리는 함수를 작성하라.
# 
#     ```
#     + - - - - + - - - - +
#     |         |         |
#     |         |         |
#     |         |         |
#     |         |         |
#     + - - - - + - - - - +
#     |         |         |
#     |         |         |
#     |         |         |
#     |         |         |
#     + - - - - + - - - - +
#     ```
# 
#     힌트: 한 줄에 하나 이상의 값을 출력하려면 `print` 함수에 여러 인자를 사용하면 된다.
# 
#     ```python
#     print('+', '-')
#     ```
# 
#     `print` 함수는 기본적으로 줄바꿈을 실행한다.
#     줄바꿈을 하지 않기 위해서는 에를 들어 아래와 같이 실행하면 된다.
# 
#     ```python
#     print('+', end=' ')
#     print('-')
#     ```
# 
#     위 프로그램을 실행하면 `+ -` 형식으로 출력된다. 
# <br><br>
# 1. 4개의 행과 4개의 열을 갖는 격자를 그리는 함수를 작성하라.
# 
#     답: http://greenteapress.com/thinkpython2/code/grid.py
#     <br><br>
#     이 연습문제는 아래 책의 Oualline에 포함된 연습문제를 응용하였다. 
# 
#         Practical C Programming, Third Edition, O’Reilly Media, 1997.
# <br><br>
# 1. 위 함수를 일반화 하라. 즉, 입력값 n이 주어지면
#     n개의 행과 n개의 열을 갖는 격자를 그리는 함수를 작성하라.
