#!/usr/bin/env python
# coding: utf-8

# # 반복문

# 특정 명령문을 반복<font size="2">iteration</font> 실행하는 장치인 
# 반복문<font size="2">loop statement</font>을 소개한다.

# ## 변수 재할당과 변수 업데이트

# 변수 재할당<font size="2">variable reassignment</font>은
# 변수가 가리키는 값은 변경하는 것이다.
# 예를 들어 아래 코드는 변수 `x`가 가리키는 값을 5에서 7로 재할당한다.
# 반면에 변수 `y`는 계속해서 5를 가리킨다.
# 
# ```python
# >>> x = 5
# >>> y = x
# >>> x = 7
# >>> x + y
# 12
# ```
# 
# 이는 변수 할당에 사용되는 하나의 등호 기호 `=` 가 양변에 위치한 두 표현식의
# 동치성을 표현하지 않음을 의미한다.

# :::{admonition} 동치성<font size="2">equality</font>
# :class: warning
# 
# 동치성<font size="2">equality</font>은 두 개의 값이 동일함을 의미한다.
# 파이썬을 포함한 대부분의 프로그래밍 언어는
# 두 표현식의 동치성 여부를 판단하는 
# 부울식<font size="2">boolean expression</font>을 지원하며,
# 두 개의 등호 기호로 표현되는 `==` 연산자를 활용한다.
# 
# ```python
# >>> 3 + 1 == 2 * 2
# True
# >>> 3 + 1 == 3 * 1
# False
# ```
# :::

# 반복문의 핵심은 특정 변수가 가리키는 값을 이용하여 다른 값으로 재할당하는
# 일을 반복하는 것이며, 이를 
# **변수 없데이트**<font size="2">variable update</font>라 한다. 
# 대표적으로 아래와 같은 표현식이 많이 사용된다.
# 
# ```python
# >>> x = x + 1
# ```
# 
# 위 할당문은 변수 `x`가 가리키던 값에 1을 더한 값을 다시 
# 변수 `x`에 할당하라고 명령한다. 
# 만약에 변수 `x` 가 0을 가리키고 있었다면 위 명령문이 반복 실행될 때마다
# `x`가 가리키는 값은 1, 2, 3 등으로 계속해서 변한다.
# 
# 반면에 아래 명령문은 변수 `x`가 가리키는 값을 
# 1만큼 줄여서 재할당한다.
# 
# ```python
# >>> x = x - 1
# ```

# ## for 반복문

# ## while 반복문
